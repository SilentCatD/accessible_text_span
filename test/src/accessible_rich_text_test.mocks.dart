// Mocks generated by Mockito 5.4.4 from annotations
// in accessible_text_span/test/src/accessible_rich_text_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:accessible_text_span/src/focusable_text_span_builder.dart'
    as _i4;
import 'package:accessible_text_span/src/type.dart' as _i5;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import '../fixture/span_builder_interact_agent.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextStyle_0 extends _i1.SmartFake implements _i2.TextStyle {
  _FakeTextStyle_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTextSpan_1 extends _i1.SmartFake implements _i2.TextSpan {
  _FakeTextSpan_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [SpanBuilderInteractAgent].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpanBuilderInteractAgent extends _i1.Mock
    implements _i3.SpanBuilderInteractAgent {
  @override
  void onFocusChanged(
    int? index,
    _i2.FocusNode? focusNode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFocusChanged,
          [
            index,
            focusNode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TextStyle generateTextSpanStyle(_i2.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateTextSpanStyle,
          [context],
        ),
        returnValue: _FakeTextStyle_0(
          this,
          Invocation.method(
            #generateTextSpanStyle,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeTextStyle_0(
          this,
          Invocation.method(
            #generateTextSpanStyle,
            [context],
          ),
        ),
      ) as _i2.TextStyle);

  @override
  void onTap1() => super.noSuchMethod(
        Invocation.method(
          #onTap1,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTap2() => super.noSuchMethod(
        Invocation.method(
          #onTap2,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FocusableTextSpanBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusableTextSpanBuilder extends _i1.Mock
    implements _i4.FocusableTextSpanBuilder {
  @override
  List<_i2.FocusNode> get nodes => (super.noSuchMethod(
        Invocation.getter(#nodes),
        returnValue: <_i2.FocusNode>[],
        returnValueForMissingStub: <_i2.FocusNode>[],
      ) as List<_i2.FocusNode>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TextSpan buildSpan(
    _i2.BuildContext? context, {
    required _i2.TextSpan? textSpan,
    required _i5.OnTextSpanFocusChanged? onFocused,
    required _i5.FocusedStyleBuilder? textStyleBuilder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildSpan,
          [context],
          {
            #textSpan: textSpan,
            #onFocused: onFocused,
            #textStyleBuilder: textStyleBuilder,
          },
        ),
        returnValue: _FakeTextSpan_1(
          this,
          Invocation.method(
            #buildSpan,
            [context],
            {
              #textSpan: textSpan,
              #onFocused: onFocused,
              #textStyleBuilder: textStyleBuilder,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTextSpan_1(
          this,
          Invocation.method(
            #buildSpan,
            [context],
            {
              #textSpan: textSpan,
              #onFocused: onFocused,
              #textStyleBuilder: textStyleBuilder,
            },
          ),
        ),
      ) as _i2.TextSpan);
}
